---
const navItems = [
  {
    title: "Home",
    label: "top",
    url: "/#top",
  },
  {
    title: "Experience",
    label: "experience",
    url: "/#experience",
  },
  {
    title: "Projects",
    label: "projects",
    url: "/#projects",
  },
  {
    title: "About me",
    label: "about-me",
    url: "/#about",
  },
  {
    title: "Contact",
    label: "contact",
    url: "mailto:renzotincopa@icloud.com",
  },
];
---

<header class="fixed top-0 left-0 z-10 w-full flex justify-center">
  <div 
    id="header-nav" 
    class="mx-auto w-full md:w-2/3 lg:w-1/2 
    bg-white/95 backdrop-blur-sm
    border-4 border-black rounded-xl
    shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]
    transition-all duration-300"
  >
    <nav class="flex justify-center items-center p-4 transform rotate-[0.5deg]">
      {
        navItems.map((link) => (
          <a
            class="relative px-4 py-2 text-lg font-bold text-black 
            transition-all duration-300 ease-in-out
            hover:text-[#fd8421] hover:scale-110"
            aria-label={link.label}
            href={link.url}
          >
            {link.title}
          </a>
        ))
      }
    </nav>
  </div>
</header>

<style>
  #header-nav {
    animation: blur linear both 0.5s;
    animation-timeline: scroll();
    animation-range: 0 500px;
  }

  @keyframes blur {
    to {
      @apply bg-white/95 backdrop-blur-sm;
    }
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");

    const callback = (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-[#fd8421]");
            } else {
              item.classList.remove("text-[#fd8421]");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px 0px -80% 0px", // Ajustado aquí - quité el -20% superior
      threshold: 0.1,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });
    
    // Agregar scroll suave para los enlaces
    navItems.forEach((link) => {
      link.addEventListener('click', (e) => {
        const href = link.getAttribute('href');
        if (href?.startsWith('#')) {
          e.preventDefault();
          const targetId = href.substring(1);
          const targetElement = document.getElementById(targetId);
          if (targetElement) {
            targetElement.scrollIntoView({ 
              behavior: 'smooth',
              block: 'start'  // Alinea la sección al inicio de la ventana
            });
          }
        }
      });
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  @keyframes nav-shadown {
    to {
      @apply shadow-lg ring-1 backdrop-blur bg-white/50 ring-white/10;
    }
  }
</style>